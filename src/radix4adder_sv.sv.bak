module radix4adder_new(din1, din2, cin, dout, cout);
	parameter no_of_digits = 8;
	parameter radix_bits = 3;
	parameter radix = 4;
	
	output signed [1:0] cout;
	output signed [radix_bits-1:0] dout[no_of_digits-1:0];
	input signed [radix_bits-1:0] din1[no_of_digits-1:0], din2[no_of_digits-1:0];
	input cin, clk;
		
	integer i = 0;
	reg signed [radix_bits-1:0] w[no_of_digits-1:0], z[no_of_digits-1:0];
	reg signed [1:0] t [no_of_digits-1:0];
	integer sum[no_of_digits-1:0];

	always @ (din1 or din2 or cin)
	begin
		for (i=0; i<no_of_digits; i=i+1)
		begin
			sum[i] = din1[i] + din2[i];
			if (sum[i]>=radix)
			begin
				t[i] = 1;
				w[i] = sum[i] - radix;
			end
			else if (sum[i]<=-radix)
			begin
				t[i] = -1;
				w[i] = sum[i] + radix;
			end
			else
			begin
				t[i] = 0;
				w[i] = sum[i];
			end
		end
		z[0] = w[0] + cin;
		for (i=1; i<no_of_digits; i=i+1)
		begin
			z[i] = w[i] + t[i-1];
		end
	end

	assign dout = z;
	assign cout = t[no_of_digits-1];
	
endmodule
