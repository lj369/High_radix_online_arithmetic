
module radix2multiplier(
	input [2:0] x, 
	input [2:0] y,
	input clk, 
	output wire [2:0] z
	);

	parameter no_of_digits = 8;
	parameter delta = 2;
	
	
	reg [no_of_digits-1:0] X_j, Y_j, X_j_1;
	wire signed [2:0] p_j;
	reg [3*(no_of_digits+5)-1:0] V_j, W_j;
	reg [3:0] counter;
	reg reset;

	initial
	begin
		counter = 4'd0;
		X_j = 0;
		Y_j = 0;
		V_j = 0;
		W_j = 0;
		X_j_1 = 0;
		reset = 1'b0;
	end
	
	always @ (posedge reset)
	begin
		counter = 4'd0;
		X_j = 0;
		Y_j = 0;
		V_j = 0;
		W_j = 0;
		X_j_1 = 0;
		reset = 1'b0;
	end
	
	onTheFlyConverterSignedDigit CA_X(
		.q (x),
		.clk (clk),
		.Q (X_j),
		.reset (reset)
	);

	onTheFlyConverterSignedDigit CA_Y(
		.q (y),
		.clk (clk),
		.Q (Y_j),
		.reset (reset)
	);

	
	calcVj Vj_1(
		.X_j(X_j_1),
		.Y_j(Y_j),
		.x_j_1(x),
		.y_j_1(y),
		.W_j(W_j),
		.clk(clk),
		.p_j(p_j),
		.V_j(V_j)
	);
	
	always @ (posedge clk)
	begin
		W_j = V_j - p_j;
		X_j_1 = X_j;
		counter = counter + 1;
		
		if (counter > delta+no_of_digits)
		begin
			reset = 1'b1;
		end
	end

	assign z = p_j;

endmodule

module calcVj(
	input [no_of_digits-1:0] X_j,
	input [no_of_digits-1:0] Y_j,
	input signed [2:0] x_j_1,
	input signed [2:0] y_j_1,
	input [3*(no_of_digits+5)-1:0] W_j,
	input clk,
	output reg signed [2:0] p_j,
	output reg [3*(no_of_digits+5)-1:0] V_j
);
	parameter no_of_digits = 8;
	
	wire signed [no_of_digits+2:0] sum_1;
	
	radix4adder_new adder_1(
	.input_1 (X_j * y_j_1), 
	.input_2 (Y_j * x_y_1),
	.output_1 (sum_1)
	); // online or not? -- use online for now

	radix4adder_new adder_2(
	.input_1 ({6'd0,sum_1[no_of_digits+2:6]}), // 6 = radix bits * delta
	.input_2 ({W_j[3*(no_of_digits+5)-1:3],3'b0}),
	.output_1 (V_j)
	);
	
	SELM selm_1(
	.V_j(V_j[3*(no_of_digits+5)-1:3*(no_of_digits+5)-3*4]),
	.p_j(p_j)
	);
	



endmodule

module SELM(
	input [3*(no_of_digits+5)-1:3*(no_of_digits+5)-3*4] V_j,
	output signed [2:0] p_j
);
	parameter no_of_digits = 8;

endmodule
